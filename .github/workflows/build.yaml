name: Build

on:
  workflow_call:
    inputs:
      application:
        description: Application Name
        type: string
        required: true
      aws_region:
        description: AWS Region
        type: string
        required: true
      environment:
        description: Application Environment
        type: string
        required: true
      push:
        description: Push docker image to ECR
        type: boolean
        required: true

env:
  REF: ${{ inputs.release || github.event.pull_request.head.ref || github.ref_name }}

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest
    needs: [release]

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Image
        run: |
          docker build -t image:testing .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        # continue-on-error: true
        with:
          image-ref: image:testing
          format: table
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"
          trivyignores: "./.trivyignore"

      - name: Push image to ECR
        if: ${{ inputs.push == true}}
        run: |
          docker tag image:testing  ${{ steps.login-ecr.outputs.registry }}/${{ inputs.application }}:${{ env.REF }} }}
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ inputs.application }}:${{ env.REF }} }}

      - name: force ECS deployment
        if: ${{ inputs.push == true }}
        run: aws ecs update-service --cluster ${{ inputs.application }}-${{ inputs.environment }} --service ${{ inputs.application }}-${{ inputs.environment }} --force-new-deployment
